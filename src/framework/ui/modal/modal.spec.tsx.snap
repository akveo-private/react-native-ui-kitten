// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@modal component checks * component styled with mappings 1`] = `
<View
  style={
    Object {
      "height": 0,
      "position": "absolute",
      "width": 0,
    }
  }
>
  <View
    pointerEvents="none"
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  />
  <AnimatedComponent
    animationDuration={300}
    onResponderRelease={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {},
        Object {
          "alignSelf": "flex-start",
        },
      ]
    }
    visible={true}
  >
    <Text
      onCloseModal={[Function]}
      style={Object {}}
    >
      Test
    </Text>
  </AnimatedComponent>
</View>
`;

exports[`@modal component checks * modal closes on passed prop 1`] = `
<TouchableOpacity
  activeOpacity={1}
  onPress={[Function]}
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <AnimatedComponent
    animationDuration={300}
    identifier="modal-test-identifier-1"
    onCloseModal={[MockFunction]}
    onResponderRelease={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {},
        Object {
          "alignSelf": "flex-start",
        },
      ]
    }
    visible={true}
  >
    <View
      onCloseModal={[Function]}
      style={Object {}}
    >
      <Text>
        Test1
      </Text>
      <Button
        onPress={[MockFunction]}
        title="Close Modal"
      />
    </View>
  </AnimatedComponent>
</TouchableOpacity>
`;

exports[`@modal component checks * modal closes on passed prop 2`] = `
<TouchableOpacity
  activeOpacity={1}
  onPress={[Function]}
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <AnimatedComponent
    animationDuration={300}
    identifier="modal-test-identifier-1"
    onCloseModal={
      [MockFunction] {
        "calls": Array [
          Array [
            undefined,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    onResponderRelease={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {},
        Object {
          "alignSelf": "flex-start",
        },
      ]
    }
    visible={true}
  >
    <View
      onCloseModal={[Function]}
      style={Object {}}
    >
      <Text>
        Test1
      </Text>
      <Button
        onPress={
          [MockFunction] {
            "calls": Array [
              Array [
                undefined,
              ],
            ],
            "results": Array [
              Object {
                "type": "return",
                "value": undefined,
              },
            ],
          }
        }
        title="Close Modal"
      />
    </View>
  </AnimatedComponent>
</TouchableOpacity>
`;

exports[`@modal component checks * modal component close on backDrop checks 1`] = `
<TouchableOpacity
  activeOpacity={1}
  onPress={[Function]}
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <AnimatedComponent
    animationDuration={300}
    identifier="modal-test-identifier-1"
    onCloseModal={[MockFunction]}
    onResponderRelease={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {},
        Object {
          "alignSelf": "flex-start",
        },
      ]
    }
    visible={true}
  >
    <View
      onCloseModal={[Function]}
      style={Object {}}
    >
      <Text>
        Test1
      </Text>
    </View>
  </AnimatedComponent>
</TouchableOpacity>
`;

exports[`@modal component checks * modal component close on backDrop checks 2`] = `
<TouchableOpacity
  activeOpacity={1}
  onPress={[Function]}
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <AnimatedComponent
    animationDuration={300}
    identifier="modal-test-identifier-1"
    onCloseModal={
      [MockFunction] {
        "calls": Array [
          Array [
            "modal-test-identifier-1",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    onResponderRelease={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {},
        Object {
          "alignSelf": "flex-start",
        },
      ]
    }
    visible={true}
  >
    <View
      onCloseModal={[Function]}
      style={Object {}}
    >
      <Text>
        Test1
      </Text>
    </View>
  </AnimatedComponent>
</TouchableOpacity>
`;

exports[`@modal component checks * modal component renders properly 1`] = `
<View
  style={
    Object {
      "height": 0,
      "position": "absolute",
      "width": 0,
    }
  }
>
  <View
    pointerEvents="none"
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  />
  <AnimatedComponent
    animationDuration={300}
    identifier="modal-test-identifier-1"
    onCloseModal={[Function]}
    onResponderRelease={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {},
        Object {
          "alignSelf": "flex-start",
        },
      ]
    }
    visible={true}
  >
    <View
      onCloseModal={[Function]}
      style={Object {}}
    >
      <Text>
        Test1
      </Text>
    </View>
  </AnimatedComponent>
</View>
`;

exports[`@modal component checks * modal component renders properly 2`] = `null`;

exports[`@modal component checks * with animations 1`] = `
<TouchableOpacity
  activeOpacity={1}
  onPress={[Function]}
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <AnimatedComponent
    animationDuration={500}
    identifier="modal-test-identifier-1"
    onCloseModal={[Function]}
    onResponderRelease={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {
          "transform": Array [
            Object {
              "translateY": 1334,
            },
          ],
        },
        Object {
          "alignSelf": "flex-start",
        },
      ]
    }
    visible={true}
  >
    <View
      onCloseModal={[Function]}
      style={Object {}}
    >
      <Text>
        Test2
      </Text>
    </View>
  </AnimatedComponent>
</TouchableOpacity>
`;

exports[`@modal component checks * with animations 2`] = `
<TouchableOpacity
  activeOpacity={1}
  onPress={[Function]}
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <AnimatedComponent
    animationDuration={500}
    identifier="modal-test-identifier-1"
    onCloseModal={[Function]}
    onResponderRelease={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pointerEvents="box-none"
    style={
      Array [
        Object {
          "opacity": 0,
        },
        Object {
          "alignSelf": "flex-start",
        },
      ]
    }
    visible={true}
  >
    <View
      onCloseModal={[Function]}
      style={Object {}}
    >
      <Text>
        Test2
      </Text>
    </View>
  </AnimatedComponent>
</TouchableOpacity>
`;
