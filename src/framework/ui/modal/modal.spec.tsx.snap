// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`@modal component checks * component styled with mappings 1`] = `
<View
  style={
    Object {
      "height": 0,
      "position": "absolute",
      "width": 0,
    }
  }
>
  <View
    pointerEvents="none"
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  />
  <View
    animationDuration={300}
    onResponderRelease={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pointerEvents="box-none"
    style={
      Object {
        "alignSelf": "flex-start",
      }
    }
    visible={true}
  >
    <Text
      onCloseModal={[Function]}
      style={Object {}}
    >
      Test
    </Text>
  </View>
</View>
`;

exports[`@modal component checks * modal closes on passed prop 1`] = `
<View
  accessible={true}
  isTVSelectable={true}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "opacity": 1,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <View
    animationDuration={300}
    identifier="modal-test-identifier-1"
    onCloseModal={[MockFunction]}
    onResponderRelease={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pointerEvents="box-none"
    style={
      Object {
        "alignSelf": "flex-start",
      }
    }
    visible={true}
  >
    <View
      onCloseModal={[Function]}
      style={Object {}}
    >
      <Text>
        Test1
      </Text>
      <View
        accessibilityRole="button"
        accessibilityStates={Array []}
        accessible={true}
        isTVSelectable={true}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "padding": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Close Modal
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`@modal component checks * modal closes on passed prop 2`] = `
<View
  accessible={true}
  isTVSelectable={true}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "opacity": 1,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <View
    animationDuration={300}
    identifier="modal-test-identifier-1"
    onCloseModal={
      [MockFunction] {
        "calls": Array [
          Array [
            undefined,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    onResponderRelease={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pointerEvents="box-none"
    style={
      Object {
        "alignSelf": "flex-start",
      }
    }
    visible={true}
  >
    <View
      onCloseModal={[Function]}
      style={Object {}}
    >
      <Text>
        Test1
      </Text>
      <View
        accessibilityRole="button"
        accessibilityStates={Array []}
        accessible={true}
        isTVSelectable={true}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
          }
        }
      >
        <View
          style={
            Array [
              Object {},
            ]
          }
        >
          <Text
            style={
              Array [
                Object {
                  "color": "#007AFF",
                  "fontSize": 18,
                  "padding": 8,
                  "textAlign": "center",
                },
              ]
            }
          >
            Close Modal
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`@modal component checks * modal component close on backDrop checks 1`] = `
<View
  accessible={true}
  isTVSelectable={true}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "opacity": 1,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <View
    animationDuration={300}
    identifier="modal-test-identifier-1"
    onCloseModal={[MockFunction]}
    onResponderRelease={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pointerEvents="box-none"
    style={
      Object {
        "alignSelf": "flex-start",
      }
    }
    visible={true}
  >
    <View
      onCloseModal={[Function]}
      style={Object {}}
    >
      <Text>
        Test1
      </Text>
    </View>
  </View>
</View>
`;

exports[`@modal component checks * modal component close on backDrop checks 2`] = `
<View
  accessible={true}
  isTVSelectable={true}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  style={
    Object {
      "bottom": 0,
      "left": 0,
      "opacity": 1,
      "position": "absolute",
      "right": 0,
      "top": 0,
    }
  }
>
  <View
    animationDuration={300}
    identifier="modal-test-identifier-1"
    onCloseModal={
      [MockFunction] {
        "calls": Array [
          Array [
            "modal-test-identifier-1",
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
    onResponderRelease={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pointerEvents="box-none"
    style={
      Object {
        "alignSelf": "flex-start",
      }
    }
    visible={true}
  >
    <View
      onCloseModal={[Function]}
      style={Object {}}
    >
      <Text>
        Test1
      </Text>
    </View>
  </View>
</View>
`;

exports[`@modal component checks * modal component renders properly 1`] = `
<View
  style={
    Object {
      "height": 0,
      "position": "absolute",
      "width": 0,
    }
  }
>
  <View
    pointerEvents="none"
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  />
  <View
    animationDuration={300}
    identifier="modal-test-identifier-1"
    onCloseModal={[Function]}
    onResponderRelease={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    pointerEvents="box-none"
    style={
      Object {
        "alignSelf": "flex-start",
      }
    }
    visible={true}
  >
    <View
      onCloseModal={[Function]}
      style={Object {}}
    >
      <Text>
        Test1
      </Text>
    </View>
  </View>
</View>
`;

exports[`@modal component checks * modal component renders properly 2`] = `null`;

exports[`@modal component checks * with animations 1`] = `
<View>
  <View
    accessibilityRole="button"
    accessibilityStates={Array []}
    accessible={true}
    isTVSelectable={true}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
    testID="1"
  >
    <View
      style={
        Array [
          Object {},
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#007AFF",
              "fontSize": 18,
              "padding": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        Open Modal
      </Text>
    </View>
  </View>
  <View
    accessible={true}
    isTVSelectable={true}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "opacity": 1,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      animationDuration={500}
      identifier="modal-test-identifier-1"
      onCloseModal={[Function]}
      onResponderRelease={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "alignSelf": "flex-start",
          "transform": Array [
            Object {
              "translateY": 1334,
            },
          ],
        }
      }
      visible={true}
    >
      <View
        onCloseModal={[Function]}
        style={Object {}}
      >
        <Text>
          Test2
        </Text>
      </View>
    </View>
  </View>
  ,
</View>
`;

exports[`@modal component checks * with animations 2`] = `
<View>
  <View
    accessibilityRole="button"
    accessibilityStates={Array []}
    accessible={true}
    isTVSelectable={true}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "opacity": 1,
      }
    }
    testID="2"
  >
    <View
      style={
        Array [
          Object {},
        ]
      }
    >
      <Text
        style={
          Array [
            Object {
              "color": "#007AFF",
              "fontSize": 18,
              "padding": 8,
              "textAlign": "center",
            },
          ]
        }
      >
        Open Modal
      </Text>
    </View>
  </View>
  <View
    accessible={true}
    isTVSelectable={true}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    style={
      Object {
        "bottom": 0,
        "left": 0,
        "opacity": 1,
        "position": "absolute",
        "right": 0,
        "top": 0,
      }
    }
  >
    <View
      animationDuration={500}
      identifier="modal-test-identifier-1"
      onCloseModal={[Function]}
      onResponderRelease={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      pointerEvents="box-none"
      style={
        Object {
          "alignSelf": "flex-start",
          "opacity": 0,
        }
      }
      visible={true}
    >
      <View
        onCloseModal={[Function]}
        style={Object {}}
      >
        <Text>
          Test2
        </Text>
      </View>
    </View>
  </View>
  ,
</View>
`;
